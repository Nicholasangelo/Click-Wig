{"version":3,"sources":["components/Container/index.js","components/Header/index.js","components/GameCard/index.js","components/ClickGame/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","react_default","a","createElement","className","children","Header","score","topScore","GameCard","role","aria-label","onClick","handleItemClick","id","style","backgroundImage","concat","image","flip","ClickGame","state","data","handleCorrectGuess","newData","_this$state","_this","newScore","newTopScore","Math","max","setState","shuffleData","handleIncorrectGuess","resetData","alert","map","item","Object","objectSpread","clicked","i","length","j","floor","random","temp","correct","newItem","this","_this2","components_Header","components_Container","nickyImg","components_GameCard","key","Component","App","components_ClickGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9fa9070.chunk.js","sourcesContent":["// OK\nimport React from \"react\";\nimport \"./container.css\";\n\nfunction Container (props) {\n    return <main className=\"container\">{props.children}</main>;\n}\n\nexport default Container;","import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header(props) {\n    return (\n        <div className=\"Header\">\n        <h1 className=\"title\">Nick Through the Ages</h1>\n        <h3>I've tried out a lot of looks through the ages, can you keep them sorted?</h3>\n        <p>Click a card to get started.  Click one you've already clicked and you're finished!</p>\n        <div className=\"scoreBoard\">\n        Score: {props.score} Top Score: {props.topScore}\n        </div>\n        </div>\n        \n\n    )\n}\n\nexport default Header;","// OK\nimport React from \"react\";\nimport \"./GameCard.css\";\n\nfunction GameCard(props) {\n    return (\n        <div \n        role=\"img\"\n        aria-label=\"click item\"\n        onClick={() => props.handleItemClick(props.id)}\n        style={{ backgroundImage: `url('${props.image}')` }}\n        className={`click-item${props.flip ? \" flip \" : \"\"}`}\n        />\n\n    )\n\n}\nexport default GameCard;","// IMPORT AND RETURN COMPONENTS AS FINISHED\n// SOUND LOGIC\n\n\n// import React from \"react\";\n\nimport React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport Header from \"../Header\";\nimport data from \"../../data.json\";\nimport GameCard from \"../GameCard\";\n// import Footer from \"../Footer\";\n\n\nclass ClickGame extends Component {\n    state = {\n        data,\n        score: 0,\n        topScore: 0\n    };\n\n    componentDidMount(){\n        this.setState({\n            data: this.shuffleData(this.state.data)\n        });\n    }\n    handleCorrectGuess = newData => {\n        const {topScore, score } = this.state;\n        const newScore = score +1;\n        const newTopScore = Math.max(newScore, topScore);\n\n        this.setState({\n            data: this.shuffleData(newData),\n            score: newScore,\n            topScore: newTopScore\n        });\n    };\n\n    handleIncorrectGuess = data => {\n        this.setState({\n            data:this.resetData(data),\n            score: 0\n        });\n        alert(\"sorry, already picked that handsome devil, back to Zero\")\n    };\n\n    resetData = data => {\n        const resetData = data.map(item => ({ ...item, clicked: false}))\n        return this.shuffleData(resetData);\n    };\n\n    shuffleData = data => {\n        let i = data.length -1;\n        while (i > 0) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = data[i];\n            data[i] = data[j];\n            data[j] = temp;\n            i--;\n        }\n        return data;\n    };\n\n    handleItemClick = (id) => {\n        let correct = false;\n        const newData = this.state.data.map(item => {\n            const newItem = { ...item };\n            if (newItem.id === id) {\n                if (!newItem.clicked) {\n                    newItem.clicked = true;\n                    correct = true;\n                }\n            }\n            return newItem;\n        })\n        correct\n        ? this.handleCorrectGuess(newData)\n        : this.handleIncorrectGuess(newData);\n    };\n\n    render() {\n        return (\n            <div>\n                <Header \n                 score={this.state.score}\n                 topScore={this.state.topScore}\n                 />\n\n                 <Container>\n                 {this.state.data.map(nickyImg => (\n                     <GameCard\n                     handleItemClick={this.handleItemClick}\n                     id={nickyImg.id}\n                     key={nickyImg.id}\n                     image={nickyImg.image}\n                     clicked={nickyImg.clicked}\n                 />\n                 ))}\n                  \n                </Container>\n                {/* <Footer /> */}\n            </div>\n        )\n    };\n};\n\n    export default ClickGame;\n","// DONT TOUCH FOR NOW\n\nimport React from 'react';\nimport './App.css';\nimport ClickGame from \"./components/ClickGame\";\n\n\nfunction App() {\n  return <ClickGame />\n}\n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// DONT TOUCH FOR NOW, MAYBE CHANGE SERVICE WORKER\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}